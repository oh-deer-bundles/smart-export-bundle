<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}Smart Export Bundle{% endblock %}</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>sf</text></svg>">
    {% block stylesheets %}
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    {% endblock %}

    {% block javascripts %}
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
        <script type="module">
            import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"
            window.Stimulus = Application.start()
            Stimulus.register("form-collection", class extends Controller {
                static targets = [ 'fields', 'field', 'addButton' ]
                static values = {
                    prototype: String,
                    maxItems: Number,
                    itemsCount: Number,
                    autocomplete: Boolean,
                    autocompletePrototypeId: String,
                    autocompletePrototypeName: String,
                    addByTop:Boolean
                }

                index = 0;

                connect () {
                    if(this.itemsCountValue) {
                        this.index = this.itemsCountValue
                    } else {
                        this.index = this.fieldTargets.length
                    }

                    this.index++;
                    if (this.autocompleteValue) {
                        this.element.addEventListener("autocomplete.change", this.autocomplete.bind(this));
                    }

                }

                autocomplete(event) {
                    this.addItem(event);
                }

                addItem(event) {
                    event.preventDefault()
                    let prototype = JSON.parse(this.prototypeValue);
                    const newField = prototype.replace(/__name__/g, this.index);
                    if (this.addByTopValue) {
                        this.fieldsTarget.insertAdjacentHTML('afterbegin', newField)
                    } else {
                        this.fieldsTarget.insertAdjacentHTML('beforeend', newField)
                    }

                    if (this.autocompleteValue) {
                        const autocompletePrototypeId = this.autocompletePrototypeIdValue.replace(/__name__/g, this.index);
                        const autocompletePrototypeName = this.autocompletePrototypeNameValue.replace(/__name__/g, this.index);
                        document.getElementById(autocompletePrototypeId).value = event.detail.value;
                        document.getElementById(autocompletePrototypeName).value = event.detail.textValue;
                    }
                    this.index++
                    this.fieldsTarget.dispatchEvent(new CustomEvent("form-collection.add", {
                        bubbles: !0,
                        detail: {itemCount: this.index, element: newField}
                    }));
                    this.reIndexPositions();


                }

                removeItem(event) {
                    event.preventDefault()
                    this.fieldTargets.forEach(element => {
                        if (element.contains(event.target)) {
                            element.remove()
                            this.index--
                            this.fieldsTarget.dispatchEvent(new CustomEvent("form-collection.remove", {
                                bubbles: !0,
                                detail: {itemCount: this.index}
                            }));
                        }
                    });
                    this.reIndexPositions();
                }

                itemsCountValueChanged() {
                    if (false === this.hasAddButtonTarget || 0 === this.maxItemsValue) {
                        return
                    }
                    const maxItemsReached = this.index >= this.maxItemsValue
                    this.addButtonTarget.classList.toggle('hidden', maxItemsReached)
                }

                rowUp(event) {
                    // console.log('rowUp');
                    let item = event.currentTarget.closest('tr.item');
                    let previous = event.currentTarget.closest('tr.item').previousElementSibling;
                    if(previous) {
                        this.fieldsTarget.insertBefore(item, previous);
                        this.reIndexPositions();
                    }
                }

                rowDown(event) {
                    // console.log('rowDown');
                    let item = event.currentTarget.closest('tr.item');
                    let next = event.currentTarget.closest('tr.item').nextElementSibling;
                    if(next) {
                        this.fieldsTarget.insertBefore(item, next.nextElementSibling);
                        this.reIndexPositions();
                    }
                }

                reIndexPositions(){
                    for (const [key, item] of Object.entries(this.fieldsTarget.children)) {
                        let input_position = item.querySelector('input.input_position');
                        if(input_position) {
                            input_position.value = key;
                        }
                    }
                }
            });


        </script>
    {% endblock %}
</head>
<body>
<div class="container-fluid">
    {% block body %}

    {% endblock %}
</div>

</body>
</html>
